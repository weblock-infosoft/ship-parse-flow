// src/lib/parser.ts
import { TablesInsert } from "@/integrations/supabase/types";
import { supabase } from "@/integrations/supabase/client";

// Fake AI-powered parser for shipping documents
export async function parseShipmentFile(file: File): Promise<TablesInsert<"shipment_orders">> {
  // In real use, this would be AI/ML text extraction
  const text = await file.text();

  // Example simple rules (placeholder for AI logic)
  const shipment: TablesInsert<"shipment_orders"> = {
    customer_name: extractValue(text, /Customer:\s*(.*)/),
    address: extractValue(text, /Address:\s*(.*)/),
    tracking_id: extractValue(text, /Tracking ID:\s*(.*)/) || crypto.randomUUID(),
    package_weight: Number(extractValue(text, /Weight:\s*(\d+)/)) || null,
    status: "pending",
    parsed_by_ai: true,
    original_file_name: file.name,
    original_file_url: null,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    created_by: "system", // placeholder
    notes: null,
    delivery_date: null,
    id: undefined, // auto-generated by Supabase
  };

  return shipment;
}

// Helper to extract fields
function extractValue(text: string, regex: RegExp): string | null {
  const match = text.match(regex);
  return match ? match[1].trim() : null;
}

// Save parsed shipment to Supabase
export async function saveShipment(shipment: TablesInsert<"shipment_orders">) {
  const { data, error } = await supabase.from("shipment_orders").insert(shipment).select();
  if (error) throw error;
  return data;
}
